<?php

/**
 * BillsTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BillsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BillsTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Bills');
    }

    /**
     * Get a collection of bills containing bills for every resident who has
     * unbilled calls in the given time period.
     * The collection is not saved to the database immediately. Call save()
     * manually.
     * Returns false when there are no calls in the time period.
     *
     * @throws Exception if the end-data is in the future
     * @param datestring $start
     * @param datestring $end
     * @returns bool|BillsCollection
     */
    public function getBillsCollectionForUnbilledCalls($start, $end)
    {
        if(strtotime($end) >= strtotime(date("Y-m-d"))) {
            throw new Exception("An end date in the future may lead to inconsistencies between calls marked as paid and the bill amount.");
        }

        /* fetch the ids of all residents with unbilled calls from the given time period */
        /*$residentidsWithUnbilledCalls = Doctrine_Query::create()
            ->from('Calls c')
            ->select('c.resident as residentid')
            ->addWhere('bill is null')
            ->addWhere('date <= ?', $end . ' 23:59:59')
            ->addWhere('date >= ?', $start)
            ->groupBy('resident')
            ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
            ->execute();*/
            
        $residentidsWithUnbilledCalls = Doctrine_Query::create()
            ->from('Residents')
            ->select('id')
            ->addWhere('unlocked = ?', 't')
            ->addWhere('move_out IS NULL OR move_out <= ?', $end)
            ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
            ->execute();

        if(count($residentidsWithUnbilledCalls) == 0) {
            return false;
        }

        /* add one bill to the collection for each resident */
        $billsCollection = new BillsCollection('Bills');
        foreach($residentidsWithUnbilledCalls as $residentid) {
            $billsCollection[$residentid]->resident = $residentid;
            $billsCollection[$residentid]->billingperiod_start = $start;
            $billsCollection[$residentid]->billingperiod_end = $end;
            $billsCollection[$residentid]->date = date("Y-m-d");
            $billsCollection[$residentid]->amount = $billsCollection[$residentid]->Residents->getBillAmountForTimeperiod($start, $end);
        }

        return $billsCollection;
    }


    /**
     * Finds all bills that bave not been debited yet but should be.
     * (Meaning: debit_sent=false, manually_created = false)
     *
     * @return Doctrine_Collection
     */
    public function findBillsWithoutDebit() {
        $bills = Doctrine_Query::create()
            ->from('Bills b')
            ->addWhere('manually_created = ?', false)
            ->addWhere('debit_sent = ?', false)
            ->execute();

        return $bills;
    }

    /**
     * Delete bills older than sfConfig::get('monthsToKeepBillsFor');
     * @TODO: Delete the calls aswell (cascade)
     */
    public function deleteOldBills()
    {
        return $this->createQuery()
            ->delete()
            ->where('date <= ?', date('Y-m-d',strtotime('-' . sfConfig::get('monthsToKeepBillsFor') . ' months')))
            ->execute();
    }
}
